alias k="kubectl"
alias kc="kubectl ctx"
alias kn="kubectl ns"

# kubecm
alias kcm="kubecm"
kcmaa(){
  echo "" > ~/.kube/config
  find ~/.kube -name *.config -exec kubecm add -f {} \;
}

# krew
alias kk="k krew"
alias kki="kk install"
alias kkr="kk remove"
alias kkl="kk list"
alias kks="kk search"
alias kku="kk update"

# k plugins
alias ke="k iexec"
alias kt="k tail"
alias ks="k sniff"

# k logs
alias kl="k logs"
alias klf="k logs -f"

# k get
alias kg="k get"
alias kga="kg all"
alias kgn="kg node -o wide"
alias kgns="kg namespaces"
alias kgs="kg svc -o wide"
alias kgd="kg deploy"
alias kgds="kg ds"
alias kge="kg ev --sort-by=.metadata.creationTimestamp -w"

# k get deploy
alias kgdc="kgd -o custom-columns='NAME:metadata.name,REPLICAS:spec.replicas,AVAILABLE:status.availableReplicas,CONTAINER:spec.template.spec.containers[*].name'"
alias kgdci="kgd -o custom-columns='NAME:metadata.name,REPLICAS:spec.replicas,AVAILABLE:status.availableReplicas,INITCONTAINER:spec.template.spec.initContainers[*].name'"
alias kgdn="kgd -o custom-columns='NAME:metadata.name,REPLICAS:spec.replicas,AVAILABLE:status.availableReplicas,DNSPOLICY:spec.template.spec.dnsPolicy,HOSTNETWORK:spec.template.spec.hostNetwork'"

# k get pod
alias kgp='kgp(){if [ -z $RUN ];then;kg pod $@;else;if [ $RUN -eq 0 ];then;kg pod --field-selector=status.phase!=Running $@;else;kg pod --field-selector=status.phase==Running $@;fi;fi;};kgp $@'
alias kgpn="kgp -o custom-columns='NAME:metadata.name,NODE:spec.nodeName,DNSPOLICY:spec.dnsPolicy,HOSTNETWORK:spec.hostNetwork,PORTS:spec.containers[*].ports'"
alias kgpc="kgp -o custom-columns='NAME:metadata.name,UID:metadata.uid,CONTAINER:spec.containers[*].name'"
alias kgpci="kgp -o custom-columns='NAME:metadata.name,UID:metadata.uid,INITCONTAINER:spec.initContainers[*].name'"
alias kgps="kgp -o custom-columns='NAME:metadata.name,SERVICEACCOUNT:spec.serviceAccountName'"
alias kgpv="kgp -o custom-columns='NAME:metadata.name,NODE:spec.nodeName,VOLUMES:spec.volumes[*].name'"
alias kgpi="kgp -o custom-columns='NAME:metadata.name,IMAGES:spec.containers[*].image'"
alias kgpip="kgp -o custom-columns='NAME:metadata.name,PULLPOLICY:spec.containers[*].imagePullPolicy'"
alias kgpil="kgp -o custom-columns='IMAGES:spec.containers[*].image' --no-headers | tr ',' '\n' | sort -u"
alias kgpila="kgp --all-namespaces -o custom-columns='IMAGES:spec.containers[*].image' --no-headers | tr ',' '\n' | sort -u"
alias kgpp="kgp -o custom-columns='NAME:metadata.name,LIVENESS:spec.containers[*].livenessProbe,READINESS:spec.containers[*].readinessProbe'"

# k get other
alias kgnds="kgp -o custom-columns='NAME:metadata.name,NODESELECTOR:spec.nodeSelector'"
alias kgpvc="kgp -o custom-columns='NAME:metadata.name,NODESELECTOR:spec.volumes[*].persistentVolumeClaim'"

# others
alias kdpe="k delete pod --field-selector=status.phase!=Running"
alias ktpc="k top pod --containers"
alias kwpr="k wait --for condition=ready pod --all"
alias kapi="k api-resources"
alias kdns="pod2xsv | xsv search -s HOSTNETWORK true | xsv search -v -s DNSPOLICY ClusterFirstWithHostNet | xsv select NAME,NAMESPACE,HOSTNETWORK,DNSPOLICY | xsv table"
alias kgcs="k config view --minify --output 'jsonpath={..server}'"
alias kgcn="k config view --minify --output 'jsonpath={..namespace}'"
alias k?='echo "[cluster] $(kgcs)"; echo "[namespace] $(kgcn)";'

# context
ccc(){
  local WSLKUBECONFIGDIR=/mnt/c/Users/${USER}
  local WSLKUBECONFIG=${WSLKUBECONFIGDIR}/.kube/config
  local KUBECONFIG=${HOME}/.kube/config
  local NAME=$(ls ${HOME}/.kube | grep .config | cut -d "." -f 1 | fzf)
  cf $HOME/.kube config ${NAME}
    if [ -d ${WSLKUBECONFIGDIR} ];then
    cp ${KUBECONFIG} ${WSLKUBECONFIG}
  fi
}
cccc(){
  local WSLKUBECONFIGDIR=/mnt/c/Users/${USER}
  local WSLKUBECONFIG=${WSLKUBECONFIGDIR}/.kube/config
  local KUBECONFIG=${HOME}/.kube/config
  local NAME=$(ls ${HOME}/.kube | grep .config | cut -d "." -f 1 | fzf)
  cf $HOME/.kube config ${NAME}
  sed  -i 's/server:.*/server: http:\/\/127.0.0.1:8001/g' ${KUBECONFIG}
  if [ -d ${WSLKUBECONFIGDIR} ];then
    cp ${KUBECONFIG} ${WSLKUBECONFIG}
  fi
  echo "proxy to ${NAME}"
  KUBECONFIG=${NAME}.${KUBECONFIG} kubectl proxy
}

# set
alias ks='k set'
alias kse='k set env'
alias ksi='k set image'
alias ksr='k set resources'
alias kss='k set selector'
# rollout
alias kr='k rollout'
alias kru='k rollout undo'
alias krs='k rollout status'
alias krr='k rollout restart'
alias krh='k rollout history'
alias krp='k rollout pause'
# run
alias krun='kuberun(){k create deploy $1 --image=$2;k expose deploy $1 --port=$3 --target-port=$3;};kuberun $@'
# explain
alias kexp='k explain --recursive'
# shell
alias kshell='k delete pod dummy --ignore-not-found && k run -i --rm --restart=Never dummy --image=nicolaka/netshoot --command -- bash -il'
# node
knode(){
    k describe node $(kgn -o wide --no-headers | fzf | awk '{print $1}')
}
# apply
alias kaf='k apply -f'
# virtctl
alias kvt='k virt'

# tshark
kubeshark(){
local CTL=$1
local BPF="port 8001"
local METHODS="${2:-GET|PUT|POST|DELETE}"
local DISPLAY="http.request"
DISPLAY="${DISPLAY} && http.user_agent contains \"${CTL}\""
DISPLAY="${DISPLAY} && http.request.uri != \"/api/v1/namespaces/kube-system/configmaps/${CTL}-controllers\""
DISPLAY="${DISPLAY} && http.request.method matches \"($METHODS)\""
DISPLAY=${3:-$DISPLAY}
echo ${DISPLAY}
local LO="lo"
local TSHARK="tshark"
type wsl.exe >/dev/null 2>&1
if [ $? -eq 0 ]; then
LO="Adapter for loopback traffic capture"
TSHARK="tshark.exe"
fi
${TSHARK} -i "${LO}" -f "${BPF}" -Y "${DISPLAY}"  -T fields -E separator=" | " -e http.request.method -e http.request.uri
}

#
knp(){
    kg svc -A -ojson  | jq -r '.items[] | select(.spec.type == "NodePort") | {"name":.metadata.name,"port":.spec.ports[].nodePort}'
}
kpnp(){
    k patch svc $1 -p '{"spec":{"type":"NodePort"}}'
    k get svc $1 -owide
}
